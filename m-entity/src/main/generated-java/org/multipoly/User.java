package org.multipoly;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.tinkerpop.gremlin.structure.Edge;
import org.apache.tinkerpop.gremlin.structure.Vertex;
import org.multipoly.meta.UserMeta;
import org.umlg.runtime.adaptor.TransactionThreadEntityVar;
import org.umlg.runtime.adaptor.UMLG;
import org.umlg.runtime.adaptor.UmlgLabelConverterFactory;
import org.umlg.runtime.adaptor.UmlgTmpIdManager;
import org.umlg.runtime.collection.Filter;
import org.umlg.runtime.collection.Qualifier;
import org.umlg.runtime.collection.UmlgRuntimeProperty;
import org.umlg.runtime.collection.UmlgSet;
import org.umlg.runtime.collection.memory.UmlgMemorySet;
import org.umlg.runtime.collection.persistent.UmlgSetImpl;
import org.umlg.runtime.domain.*;
import org.umlg.runtime.domain.restlet.FieldType;
import org.umlg.runtime.domain.restlet.UmlgRestletNode;
import org.umlg.runtime.util.ObjectMapperFactory;
import org.umlg.runtime.validation.UmlgConstraintViolation;
import org.umlg.runtime.validation.UmlgConstraintViolationException;
import org.umlg.runtime.validation.UmlgValidation;

import java.util.*;

public class User extends BaseUmlgCompositionNode implements UmlgRestletNode, UmlgRootNode, CompositionNode {
	static final public long serialVersionUID = 1L;
	private UmlgSet<String> Name;
	private UmlgSet<String> Username;
	private UmlgSet<String> Password;
	private UmlgSet<Integer> LastLoggedIn;
	private UmlgSet<Integer> LastLoggerOut;
	private UmlgSet<ROLE> role;
	private UmlgSet<UserGroup> usergroup;
	private UmlgSet<Boolean> Rogue;
	private String tmpId;	// tmpId is only used the umlg restlet gui. It is never persisted. Its value is generated by the gui.

	/**
	 * constructor for User
	 * 
	 * @param id 
	 */
	public User(Object id)  {
		super(id);
	}
	
	/**
	 * constructor for User
	 * 
	 * @param vertex 
	 */
	public User(Vertex vertex)  {
		super(vertex);
	}
	
	/**
	 * default constructor for User
	 */
	public User()  {
		this(true);
	}
	
	/**
	 * constructor for User
	 * 
	 * @param persistent 
	 */
	public User(Boolean persistent)  {
		super(persistent);
		Edge edge = UMLG.get().getRoot().addEdge(getEdgeToRootLabel(), this.vertex);
		edge.property("inClass", this.getClass().getName());
	}

	public void addToLastLoggedIn(Integer LastLoggedIn) {
		if ( !this.LastLoggedIn.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( LastLoggedIn != null ) {
			List<UmlgConstraintViolation> violations = validateLastLoggedIn(LastLoggedIn);
			if ( violations.isEmpty() ) {
				this.LastLoggedIn.add(LastLoggedIn);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToLastLoggedInIgnoreInverse(Integer LastLoggedIn) {
		if ( !this.LastLoggedIn.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( LastLoggedIn != null ) {
			List<UmlgConstraintViolation> violations = validateLastLoggedIn(LastLoggedIn);
			if ( violations.isEmpty() ) {
				this.LastLoggedIn.add(LastLoggedIn);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToLastLoggerOut(Integer LastLoggerOut) {
		if ( !this.LastLoggerOut.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( LastLoggerOut != null ) {
			List<UmlgConstraintViolation> violations = validateLastLoggerOut(LastLoggerOut);
			if ( violations.isEmpty() ) {
				this.LastLoggerOut.add(LastLoggerOut);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToLastLoggerOutIgnoreInverse(Integer LastLoggerOut) {
		if ( !this.LastLoggerOut.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( LastLoggerOut != null ) {
			List<UmlgConstraintViolation> violations = validateLastLoggerOut(LastLoggerOut);
			if ( violations.isEmpty() ) {
				this.LastLoggerOut.add(LastLoggerOut);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToName(String Name) {
		if ( !this.Name.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Name != null ) {
			List<UmlgConstraintViolation> violations = validateName(Name);
			if ( violations.isEmpty() ) {
				this.Name.add(Name);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToNameIgnoreInverse(String Name) {
		if ( !this.Name.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Name != null ) {
			List<UmlgConstraintViolation> violations = validateName(Name);
			if ( violations.isEmpty() ) {
				this.Name.add(Name);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToPassword(String Password) {
		if ( !this.Password.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Password != null ) {
			List<UmlgConstraintViolation> violations = validatePassword(Password);
			if ( violations.isEmpty() ) {
				this.Password.add(Password);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToPasswordIgnoreInverse(String Password) {
		if ( !this.Password.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Password != null ) {
			List<UmlgConstraintViolation> violations = validatePassword(Password);
			if ( violations.isEmpty() ) {
				this.Password.add(Password);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToRogue(Boolean Rogue) {
		if ( !this.Rogue.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Rogue != null ) {
			List<UmlgConstraintViolation> violations = validateRogue(Rogue);
			if ( violations.isEmpty() ) {
				this.Rogue.add(Rogue);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToRogueIgnoreInverse(Boolean Rogue) {
		if ( !this.Rogue.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Rogue != null ) {
			List<UmlgConstraintViolation> violations = validateRogue(Rogue);
			if ( violations.isEmpty() ) {
				this.Rogue.add(Rogue);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToRole(ROLE role) {
		if ( !this.role.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( role != null ) {
			List<UmlgConstraintViolation> violations = validateRole(role);
			if ( violations.isEmpty() ) {
				this.role.add(role);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToRoleIgnoreInverse(ROLE role) {
		if ( !this.role.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( role != null ) {
			List<UmlgConstraintViolation> violations = validateRole(role);
			if ( violations.isEmpty() ) {
				this.role.add(role);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToUsergroup(UserGroup usergroup) {
		if ( usergroup != null ) {
			if ( !this.usergroup.isEmpty() ) {
				throw new RuntimeException("Property RootElement::org::multipoly::User::usergroupis a one and already has a value!");
			}
			this.usergroup.add(usergroup);
		}
	}
	
	public void addToUsergroupIgnoreInverse(UserGroup usergroup) {
		if ( usergroup != null ) {
			if ( !this.usergroup.isEmpty() ) {
				throw new RuntimeException("Property RootElement::org::multipoly::User::usergroupis a one and already has a value!");
			}
			this.usergroup.addIgnoreInverse(usergroup);
		}
	}
	
	public void addToUsername(String Username) {
		if ( !this.Username.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Username != null ) {
			List<UmlgConstraintViolation> violations = validateUsername(Username);
			if ( violations.isEmpty() ) {
				this.Username.add(Username);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToUsernameIgnoreInverse(String Username) {
		if ( !this.Username.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Username != null ) {
			List<UmlgConstraintViolation> violations = validateUsername(Username);
			if ( violations.isEmpty() ) {
				this.Username.add(Username);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	static public UmlgSet<? extends User> allInstances(Filter filter) {
		UmlgSet<User> result = new UmlgMemorySet<User>();
		result.addAll(UMLG.get().allInstances(User.class.getName(), filter));
		return result;
	}
	
	static public UmlgSet<? extends User> allInstances() {
		UmlgSet<User> result = new UmlgMemorySet<User>();
		result.addAll(UMLG.get().allInstances(User.class.getName()));
		return result;
	}
	
	@Override
	public List<UmlgConstraintViolation> checkClassConstraints() {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}
	
	public void clearLastLoggedIn() {
		this.LastLoggedIn.clear();
	}
	
	public void clearLastLoggerOut() {
		this.LastLoggerOut.clear();
	}
	
	public void clearName() {
		this.Name.clear();
	}
	
	public void clearPassword() {
		this.Password.clear();
	}
	
	public void clearRogue() {
		this.Rogue.clear();
	}
	
	public void clearRole() {
		this.role.clear();
	}
	
	public void clearUsergroup() {
		this.usergroup.clear();
	}
	
	public void clearUsername() {
		this.Username.clear();
	}
	
	@Override
	public void delete() {
		this.usergroup.clear();
		TransactionThreadEntityVar.remove(this);
		this.vertex.remove();
	}
	
	@Override
	public void fromJson(Map<String,Object> propertyMap) {
		fromJsonDataTypeAndComposite(propertyMap);
		fromJsonNonCompositeOne(propertyMap);
		fromJsonNonCompositeRequiredMany(propertyMap);
	}
	
	@Override
	public void fromJson(String json) {
		ObjectMapper mapper = ObjectMapperFactory.INSTANCE.getObjectMapper();
		try {
			@SuppressWarnings(	"unchecked")
			 Map<String,Object> propertyMap = mapper.readValue(json, Map.class);
			fromJson(propertyMap);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	@Override
	public void fromJsonDataTypeAndComposite(Map<String,Object> propertyMap) {
		Number LastLoggerOutAsNumber = (Number)propertyMap.get("LastLoggerOut");
		Number LastLoggedInAsNumber = (Number)propertyMap.get("LastLoggedIn");
		if ( propertyMap.containsKey("Username") ) {
			if ( propertyMap.get("Username") != null ) {
				String Username = (String)propertyMap.get("Username");
				setUsername(Username);
			} else {
				setUsername(null);
			}
		}
		if ( propertyMap.containsKey("Password") ) {
			if ( propertyMap.get("Password") != null ) {
				String Password = (String)propertyMap.get("Password");
				setPassword(Password);
			} else {
				setPassword(null);
			}
		}
		if ( propertyMap.containsKey("role") ) {
			if ( propertyMap.get("role") != null ) {
				ROLE role = ROLE.fromJson((String)propertyMap.get("role"));
				setRole(role);
			} else {
				setRole(null);
			}
		}
		if ( propertyMap.containsKey("LastLoggerOut") ) {
			if ( propertyMap.get("LastLoggerOut") != null ) {
				Integer LastLoggerOut = LastLoggerOutAsNumber != null ? LastLoggerOutAsNumber.intValue() : null;
				setLastLoggerOut(LastLoggerOut);
			} else {
				setLastLoggerOut(null);
			}
		}
		if ( propertyMap.containsKey("LastLoggedIn") ) {
			if ( propertyMap.get("LastLoggedIn") != null ) {
				Integer LastLoggedIn = LastLoggedInAsNumber != null ? LastLoggedInAsNumber.intValue() : null;
				setLastLoggedIn(LastLoggedIn);
			} else {
				setLastLoggedIn(null);
			}
		}
		if ( propertyMap.containsKey("Rogue") ) {
			if ( propertyMap.get("Rogue") != null ) {
				Boolean Rogue = (Boolean)propertyMap.get("Rogue");
				setRogue(Rogue);
			} else {
				setRogue(null);
			}
		}
		if ( propertyMap.containsKey("Name") ) {
			if ( propertyMap.get("Name") != null ) {
				String Name = (String)propertyMap.get("Name");
				setName(Name);
			} else {
				setName(null);
			}
		}
		if ( propertyMap.containsKey("tmpId") ) {
			if ( propertyMap.get("tmpId") != null ) {
				this.tmpId = (String)propertyMap.get("tmpId");
				UmlgTmpIdManager.INSTANCE.put(this.tmpId, getId());
			} else {
				this.tmpId = null;
			}
		}
	}
	
	@SuppressWarnings(	"unchecked")
	@Override
	public void fromJsonNonCompositeOne(Map<String,Object> propertyMap) {
		if ( propertyMap.containsKey("usergroup") ) {
			if ( propertyMap.get("usergroup") != null ) {
				Map<String, Object> usergroupMap = (Map<String, Object>)propertyMap.get("usergroup");
				if ( usergroupMap.isEmpty() || usergroupMap.get("id") == null ) {
					setUsergroup(null);
				} else {
					Object id;
					Object idFromMap = usergroupMap.get("id");
					if ( (idFromMap instanceof String) && ((String)idFromMap).startsWith("fake") ) {
						id = UmlgTmpIdManager.INSTANCE.get((String)idFromMap);
					} else {
						id = idFromMap;
					}
					setUsergroup((UserGroup)UMLG.get().getEntity(id));
				}
			} else {
				setUsergroup(null);
			}
		}
	}
	
	@Override
	public void fromJsonNonCompositeRequiredMany(Map<String,Object> propertyMap) {
	}
	
	public String getEdgeToRootLabel() {
		return UmlgLabelConverterFactory.getUmlgLabelConverter().convert("root_User");
	}
	
	public Integer getLastLoggedIn() {
		UmlgSet<Integer> tmp = this.LastLoggedIn;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	public Integer getLastLoggerOut() {
		UmlgSet<Integer> tmp = this.LastLoggerOut;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	@Override
	public String getMetaDataAsJson() {
		return User.UserRuntimePropertyEnum.asJson();
	}
	
	public UmlgMetaNode getMetaNode() {
		return UserMeta.getInstance();
	}
	
	public String getName() {
		UmlgSet<String> tmp = this.Name;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	@Override
	public UmlgNode getOwningObject() {
		return null;
	}
	
	public String getPassword() {
		UmlgSet<String> tmp = this.Password;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	@Override
	public String getQualifiedName() {
		return "RootElement::org::multipoly::User";
	}
	
	/**
	 * getQualifiers is called from the collection in order to update the index used to implement the qualifier
	 * 
	 * @param tumlRuntimeProperty 
	 * @param node 
	 * @param inverse 
	 */
	@Override
	public List<Qualifier> getQualifiers(UmlgRuntimeProperty tumlRuntimeProperty, UmlgNode node, boolean inverse) {
		List<Qualifier> result = Collections.emptyList();
		UserRuntimePropertyEnum runtimeProperty;
		if ( !inverse ) {
			runtimeProperty = UserRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getQualifiedName());
		} else {
			runtimeProperty = UserRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getInverseQualifiedName());
		}
		if ( runtimeProperty != null && result.isEmpty() ) {
			switch ( runtimeProperty ) {
				default:
					result = Collections.emptyList();
			}
		
		}
		return result;
	}
	
	public Boolean getRogue() {
		UmlgSet<Boolean> tmp = this.Rogue;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	public ROLE getRole() {
		UmlgSet<ROLE> tmp = this.role;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	/**
	 * getSize is called from the BaseCollection.addInternal in order to save the sice of the inverse collection to update the edge's sequence order
	 * 
	 * @param inverse 
	 * @param tumlRuntimeProperty 
	 */
	@Override
	public int getSize(boolean inverse, UmlgRuntimeProperty tumlRuntimeProperty) {
		int result = 0;
		UserRuntimePropertyEnum runtimeProperty;
		if ( !inverse ) {
			runtimeProperty = UserRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getQualifiedName());
		} else {
			runtimeProperty = UserRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getInverseQualifiedName());
		}
		if ( runtimeProperty != null && result == 0 ) {
			switch ( runtimeProperty ) {
				case Username:
					result = Username.size();
					break;
			
				case usergroup:
					result = usergroup.size();
					break;
			
				case Password:
					result = Password.size();
					break;
			
				case role:
					result = role.size();
					break;
			
				case LastLoggerOut:
					result = LastLoggerOut.size();
					break;
			
				case LastLoggedIn:
					result = LastLoggedIn.size();
					break;
			
				case Rogue:
					result = Rogue.size();
					break;
			
				case Name:
					result = Name.size();
					break;
			
				default:
					result = 0;
			}
		
		}
		return result;
	}
	
	@Override
	public String getUid() {
		String uid;
		if ( !this.vertex.property("uid").isPresent() ) {
			uid=UUID.randomUUID().toString();
			this.vertex.property("uid", uid);
		} else {
			uid=this.vertex.value("uid");
		}
		return uid;
	}
	
	@Override
	public String getUmlName() {
		return "User";
	}
	
	@Override
	public String getUri() {
		return ("\"" + UserRuntimePropertyEnum.getUriToObject() + "\"");
	}
	
	public UserGroup getUsergroup() {
		UmlgSet<UserGroup> tmp = this.usergroup;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	public String getUsername() {
		UmlgSet<String> tmp = this.Username;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	@Override
	public boolean hasOnlyOneCompositeParent() {
		int result = 0;
		return result == 1;
	}
	
	public void initVariables() {
	}
	
	@Override
	public void initialiseProperties() {
		this.Username =  new UmlgSetImpl<String>(this, UserRuntimePropertyEnum.Username);
		this.usergroup =  new UmlgSetImpl<UserGroup>(this, UserRuntimePropertyEnum.usergroup);
		this.Password =  new UmlgSetImpl<String>(this, UserRuntimePropertyEnum.Password);
		this.role =  new UmlgSetImpl<ROLE>(this, UserRuntimePropertyEnum.role);
		this.LastLoggerOut =  new UmlgSetImpl<Integer>(this, UserRuntimePropertyEnum.LastLoggerOut);
		this.LastLoggedIn =  new UmlgSetImpl<Integer>(this, UserRuntimePropertyEnum.LastLoggedIn);
		this.Rogue =  new UmlgSetImpl<Boolean>(this, UserRuntimePropertyEnum.Rogue);
		//Booleans are defaulted to false if the entity already exist then it will already have a value
		if ( this.Rogue.isEmpty() ) {
			this.Rogue.add(false);
		}
		this.Name =  new UmlgSetImpl<String>(this, UserRuntimePropertyEnum.Name);
	}
	
	@Override
	public void initialiseProperty(UmlgRuntimeProperty tumlRuntimeProperty, boolean inverse) {
		UserRuntimePropertyEnum runtimeProperty;
		if ( !inverse ) {
			runtimeProperty = (UserRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getQualifiedName()));
		} else {
			runtimeProperty = (UserRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getInverseQualifiedName()));
		}
		if ( runtimeProperty != null ) {
			switch ( runtimeProperty ) {
				case Username:
					this.Username =  new UmlgSetImpl<String>(this, UserRuntimePropertyEnum.Username);
					break;
			
				case usergroup:
					this.usergroup =  new UmlgSetImpl<UserGroup>(this, UserRuntimePropertyEnum.usergroup);
					break;
			
				case Password:
					this.Password =  new UmlgSetImpl<String>(this, UserRuntimePropertyEnum.Password);
					break;
			
				case role:
					this.role =  new UmlgSetImpl<ROLE>(this, UserRuntimePropertyEnum.role);
					break;
			
				case LastLoggerOut:
					this.LastLoggerOut =  new UmlgSetImpl<Integer>(this, UserRuntimePropertyEnum.LastLoggerOut);
					break;
			
				case LastLoggedIn:
					this.LastLoggedIn =  new UmlgSetImpl<Integer>(this, UserRuntimePropertyEnum.LastLoggedIn);
					break;
			
				case Rogue:
					this.Rogue =  new UmlgSetImpl<Boolean>(this, UserRuntimePropertyEnum.Rogue);
					break;
			
				case Name:
					this.Name =  new UmlgSetImpl<String>(this, UserRuntimePropertyEnum.Name);
					break;
			
			}
		
		}
	}
	
	@Override
	public UmlgRuntimeProperty inverseAdder(UmlgRuntimeProperty tumlRuntimeProperty, boolean inverse, UmlgNode umlgNode) {
		UserRuntimePropertyEnum runtimeProperty;
		if ( !inverse ) {
			runtimeProperty = (UserRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getQualifiedName()));
		} else {
			runtimeProperty = (UserRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getInverseQualifiedName()));
		}
		if ( runtimeProperty != null ) {
			switch ( runtimeProperty ) {
				case usergroup:
					this.usergroup.inverseAdder((UserGroup)umlgNode);
					break;
			
			}
			
			return runtimeProperty;
		} else {
			return null;
		}
	}
	
	@Override
	public boolean isTinkerRoot() {
		return true;
	}
	
	public UmlgSet<UserGroup> lookupFor_user_usergroup() {
		UmlgSet<UserGroup> result = new UmlgMemorySet<UserGroup>();
		Filter<UserGroup> filter = new Filter<UserGroup>() {
		    @Override
		    public boolean filter(UserGroup entity){
		        return !entity.getUser().contains(User.this);
		    }
		};
		result.addAll(org.multipoly.UserGroup.allInstances(filter));
		return result;
	}
	
	public void removeFromLastLoggedIn(Integer LastLoggedIn) {
		if ( LastLoggedIn != null ) {
			this.LastLoggedIn.remove(LastLoggedIn);
		}
	}
	
	public void removeFromLastLoggedIn(UmlgSet<Integer> LastLoggedIn) {
		if ( !LastLoggedIn.isEmpty() ) {
			this.LastLoggedIn.removeAll(LastLoggedIn);
		}
	}
	
	public void removeFromLastLoggerOut(Integer LastLoggerOut) {
		if ( LastLoggerOut != null ) {
			this.LastLoggerOut.remove(LastLoggerOut);
		}
	}
	
	public void removeFromLastLoggerOut(UmlgSet<Integer> LastLoggerOut) {
		if ( !LastLoggerOut.isEmpty() ) {
			this.LastLoggerOut.removeAll(LastLoggerOut);
		}
	}
	
	public void removeFromName(String Name) {
		if ( Name != null ) {
			this.Name.remove(Name);
		}
	}
	
	public void removeFromName(UmlgSet<String> Name) {
		if ( !Name.isEmpty() ) {
			this.Name.removeAll(Name);
		}
	}
	
	public void removeFromPassword(String Password) {
		if ( Password != null ) {
			this.Password.remove(Password);
		}
	}
	
	public void removeFromPassword(UmlgSet<String> Password) {
		if ( !Password.isEmpty() ) {
			this.Password.removeAll(Password);
		}
	}
	
	public void removeFromRogue(Boolean Rogue) {
		if ( Rogue != null ) {
			this.Rogue.remove(Rogue);
		}
	}
	
	public void removeFromRogue(UmlgSet<Boolean> Rogue) {
		if ( !Rogue.isEmpty() ) {
			this.Rogue.removeAll(Rogue);
		}
	}
	
	public void removeFromRole(ROLE role) {
		if ( role != null ) {
			this.role.remove(role);
		}
	}
	
	public void removeFromRole(UmlgSet<ROLE> role) {
		if ( !role.isEmpty() ) {
			this.role.removeAll(role);
		}
	}
	
	public void removeFromUsergroup(UmlgSet<UserGroup> usergroup) {
		if ( !usergroup.isEmpty() ) {
			this.usergroup.removeAll(usergroup);
		}
	}
	
	public void removeFromUsergroup(UserGroup usergroup) {
		if ( usergroup != null ) {
			this.usergroup.remove(usergroup);
		}
	}
	
	public void removeFromUsername(String Username) {
		if ( Username != null ) {
			this.Username.remove(Username);
		}
	}
	
	public void removeFromUsername(UmlgSet<String> Username) {
		if ( !Username.isEmpty() ) {
			this.Username.removeAll(Username);
		}
	}
	
	public void setLastLoggedIn(Integer LastLoggedIn) {
		clearLastLoggedIn();
		addToLastLoggedIn(LastLoggedIn);
	}
	
	public void setLastLoggerOut(Integer LastLoggerOut) {
		clearLastLoggerOut();
		addToLastLoggerOut(LastLoggerOut);
	}
	
	public void setName(String Name) {
		clearName();
		addToName(Name);
	}
	
	public void setPassword(String Password) {
		clearPassword();
		addToPassword(Password);
	}
	
	public void setRogue(Boolean Rogue) {
		clearRogue();
		addToRogue(Rogue);
	}
	
	public void setRole(ROLE role) {
		clearRole();
		addToRole(role);
	}
	
	public void setUsergroup(UserGroup usergroup) {
		clearUsergroup();
		addToUsergroup(usergroup);
	}
	
	public void setUsername(String Username) {
		clearUsername();
		addToUsername(Username);
	}
	
	/**
	 * deep indicates that components also be serialized.
	 * 
	 * @param deep 
	 */
	@Override
	public String toJson(Boolean deep) {
		StringBuilder sb = new StringBuilder();
		if ( this.tmpId != null ) {
			sb.append("\"tmpId\": \"" + this.tmpId + "\", ");
		}
		sb.append("\"id\": \"" + getId() + "\", ");
		sb.append("\"metaNodeId\": \"" + getMetaNode().getId() + "\", ");
		sb.append("\"Username\": " + (getUsername() != null ? "\"" + StringEscapeUtils.escapeJson(getUsername()) + "\"" : null ));
		sb.append(", ");
		if ( getUsergroup() != null ) {
			if ( UmlgTmpIdManager.INSTANCE.get(getUsergroup().getId()) != null ) {
				sb.append("\"usergroup\": " + "{\"id\": \"" + getUsergroup().getId() + "\", \"tmpId\": \"" + UmlgTmpIdManager.INSTANCE.get(getUsergroup().getId())  + "\",\"displayName\": \"" + getUsergroup().getName() + "\"}" + "");
			} else {
				sb.append("\"usergroup\": " + "{\"id\": \"" + getUsergroup().getId() + "\", \"displayName\": \"" + getUsergroup().getName() + "\"}" + "");
			}
		} else {
			sb.append("\"usergroup\": " + "{\"id\": " + null + ", \"displayName\": " + null + "}");
		}
		sb.append(", ");
		sb.append("\"Password\": " + (getPassword() != null ? "\"" + StringEscapeUtils.escapeJson(getPassword()) + "\"" : null ));
		sb.append(", ");
		sb.append("\"role\": " + (getRole() == null ? null : "\"" + getRole().toJson() + "\""));
		sb.append(", ");
		sb.append("\"LastLoggerOut\": " + getLastLoggerOut() + "");
		sb.append(", ");
		sb.append("\"LastLoggedIn\": " + getLastLoggedIn() + "");
		sb.append(", ");
		sb.append("\"Rogue\": " + getRogue() + "");
		sb.append(", ");
		sb.append("\"Name\": " + (getName() != null ? "\"" + StringEscapeUtils.escapeJson(getName()) + "\"" : null ));
		sb.append(", ");
		sb.append("\"qualifiedName\": \"" + getQualifiedName() + "\"");
		sb.append(", ");
		sb.append("\"uri\": " + getUri());
		sb.insert(0, "{");
		sb.append("}");
		return sb.toString();
	}
	
	@Override
	public String toJson() {
		return toJson(false);
	}
	
	/**
	 * deep indicates that components also be serialized.
	 * 
	 * @param deep 
	 */
	@Override
	public String toJsonWithoutCompositeParent(Boolean deep) {
		StringBuilder sb = new StringBuilder();
		if ( this.tmpId != null ) {
			sb.append("\"tmpId\": \"" + this.tmpId + "\", ");
		}
		sb.append("\"id\": \"" + getId() + "\", ");
		sb.append("\"metaNodeId\": \"" + getMetaNode().getId() + "\", ");
		sb.append("\"Username\": " + (getUsername() != null ? "\"" + StringEscapeUtils.escapeJson(getUsername()) + "\"" : null ));
		sb.append(", ");
		if ( getUsergroup() != null ) {
			if ( UmlgTmpIdManager.INSTANCE.get(getUsergroup().getId()) != null ) {
				sb.append("\"usergroup\": " + "{\"id\": \"" + getUsergroup().getId() + "\", \"tmpId\": \"" + UmlgTmpIdManager.INSTANCE.get(getUsergroup().getId())  + "\",\"displayName\": \"" + getUsergroup().getName() + "\"}" + "");
			} else {
				sb.append("\"usergroup\": " + "{\"id\": \"" + getUsergroup().getId() + "\", \"displayName\": \"" + getUsergroup().getName() + "\"}" + "");
			}
		} else {
			sb.append("\"usergroup\": " + "{\"id\": " + null + ", \"displayName\": " + null + "}");
		}
		sb.append(", ");
		sb.append("\"Password\": " + (getPassword() != null ? "\"" + StringEscapeUtils.escapeJson(getPassword()) + "\"" : null ));
		sb.append(", ");
		sb.append("\"role\": " + (getRole() == null ? null : "\"" + getRole().toJson() + "\""));
		sb.append(", ");
		sb.append("\"LastLoggerOut\": " + getLastLoggerOut() + "");
		sb.append(", ");
		sb.append("\"LastLoggedIn\": " + getLastLoggedIn() + "");
		sb.append(", ");
		sb.append("\"Rogue\": " + getRogue() + "");
		sb.append(", ");
		sb.append("\"Name\": " + (getName() != null ? "\"" + StringEscapeUtils.escapeJson(getName()) + "\"" : null ));
		sb.append(", ");
		sb.append("\"qualifiedName\": \"" + getQualifiedName() + "\"");
		sb.append(", ");
		sb.append("\"uri\": " + getUri());
		sb.insert(0, "{");
		sb.append("}");
		return sb.toString();
	}
	
	@Override
	public String toJsonWithoutCompositeParent() {
		return toJsonWithoutCompositeParent(false);
	}
	
	public List<UmlgConstraintViolation> validateLastLoggedIn(Integer LastLoggedIn) {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}
	
	public List<UmlgConstraintViolation> validateLastLoggerOut(Integer LastLoggerOut) {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}
	
	@Override
	public List<UmlgConstraintViolation> validateMultiplicities() {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		if ( getUsername() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::User::Username", "lower multiplicity is 1"));
		}
		if ( getUsergroup() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::User::usergroup", "lower multiplicity is 1"));
		}
		if ( getPassword() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::User::Password", "lower multiplicity is 1"));
		}
		if ( getRole() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::User::role", "lower multiplicity is 1"));
		}
		if ( getLastLoggerOut() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::User::LastLoggerOut", "lower multiplicity is 1"));
		}
		if ( getLastLoggedIn() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::User::LastLoggedIn", "lower multiplicity is 1"));
		}
		if ( getRogue() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::User::Rogue", "lower multiplicity is 1"));
		}
		if ( getName() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::User::Name", "lower multiplicity is 1"));
		}
		return result;
	}
	
	public List<UmlgConstraintViolation> validateName(String Name) {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}
	
	public List<UmlgConstraintViolation> validatePassword(String Password) {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}
	
	public List<UmlgConstraintViolation> validateRogue(Boolean Rogue) {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}
	
	public List<UmlgConstraintViolation> validateRole(ROLE role) {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}
	
	public List<UmlgConstraintViolation> validateUsername(String Username) {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}

	static public enum UserRuntimePropertyEnum implements UmlgRuntimeProperty {
		Username(/* qualifiedName */ "RootElement::org::multipoly::User::Username",/* persistentName */ "Username",/* inverseName */ "inverseOf::Username",/* inverseQualifiedName */ "inverseOf::RootElement::org::multipoly::User::Username",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ true,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("Username"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ false,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ String.class,/* json */ "{\"name\": \"Username\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": true, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::User::Username\", \"persistentName\": \"Username\", \"inverseName\": \"inverseOf::Username\", \"inverseQualifiedName\": \"inverseOf::RootElement::org::multipoly::User::Username\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"Username\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": false, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/users/{userId}/Username\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/users/{userId}/Username\", \"tumlMetaDataUri\": \"/RootElement/stringMetaData\", \"fieldType\": \"" + FieldType.String + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/users/{userId}/Username",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/users/{userId}/Username",/* tumlMetaDataUri */ "/RootElement/stringMetaData",/* fieldType */ FieldType.String,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		usergroup(/* qualifiedName */ "RootElement::org::multipoly::User::usergroup",/* persistentName */ "usergroup",/* inverseName */ "user",/* inverseQualifiedName */ "RootElement::org::multipoly::UserGroup::user",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ false,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ false,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("userGroup_role"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ -1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ true,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ UserGroup.class,/* json */ "{\"name\": \"usergroup\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": false, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::User::usergroup\", \"persistentName\": \"usergroup\", \"inverseName\": \"user\", \"inverseQualifiedName\": \"RootElement::org::multipoly::UserGroup::user\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": false, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": -1, \"label\": \"userGroup_role\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": true, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/users/{userId}/usergroup\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/users/{userId}/usergroup\", \"tumlMetaDataUri\": \"/RootElement/userGroupMetaData\", \"fieldType\": \"" + FieldType.Integer + "\", \"tumlLookupUri\": \"/RootElement/users/{userId}/lookupFor_user_usergroup\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/users/{userId}/usergroup",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/users/{userId}/usergroup",/* tumlMetaDataUri */ "/RootElement/userGroupMetaData",/* fieldType */ FieldType.Integer,/* tumlLookupUri */ "/RootElement/users/{userId}/lookupFor_user_usergroup",/* tumlCompositeParentLookupUri */ ""),
		Password(/* qualifiedName */ "RootElement::org::multipoly::User::Password",/* persistentName */ "Password",/* inverseName */ "inverseOf::Password",/* inverseQualifiedName */ "inverseOf::RootElement::org::multipoly::User::Password",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ true,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("Password"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ false,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ String.class,/* json */ "{\"name\": \"Password\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": true, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::User::Password\", \"persistentName\": \"Password\", \"inverseName\": \"inverseOf::Password\", \"inverseQualifiedName\": \"inverseOf::RootElement::org::multipoly::User::Password\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"Password\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": false, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/users/{userId}/Password\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/users/{userId}/Password\", \"tumlMetaDataUri\": \"/RootElement/stringMetaData\", \"fieldType\": \"" + FieldType.String + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/users/{userId}/Password",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/users/{userId}/Password",/* tumlMetaDataUri */ "/RootElement/stringMetaData",/* fieldType */ FieldType.String,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		role(/* qualifiedName */ "RootElement::org::multipoly::User::role",/* persistentName */ "role",/* inverseName */ "user",/* inverseQualifiedName */ "RootElement::org::multipoly::ROLE::user",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ false,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ true,/* manyEnumeration */ false,/* isControllingSide */ false,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("user_role"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ -1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ true,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ ROLE.class,/* json */ "{\"name\": \"role\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": false, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::User::role\", \"persistentName\": \"role\", \"inverseName\": \"user\", \"inverseQualifiedName\": \"RootElement::org::multipoly::ROLE::user\", \"manyPrimitive\": false, \"oneEnumeration\": true, \"manyEnumeration\": false, \"controllingSide\": false, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": -1, \"label\": \"user_role\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": true, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/users/{userId}/role\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/users/{userId}/role\", \"tumlMetaDataUri\": \"/RootElement/rOLEMetaData\", \"fieldType\": \"" + FieldType.Integer + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/users/{userId}/role",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/users/{userId}/role",/* tumlMetaDataUri */ "/RootElement/rOLEMetaData",/* fieldType */ FieldType.Integer,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		LastLoggerOut(/* qualifiedName */ "RootElement::org::multipoly::User::LastLoggerOut",/* persistentName */ "LastLoggerOut",/* inverseName */ "inverseOf::LastLoggerOut",/* inverseQualifiedName */ "inverseOf::RootElement::org::multipoly::User::LastLoggerOut",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ true,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("LastLoggerOut"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ false,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ Integer.class,/* json */ "{\"name\": \"LastLoggerOut\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": true, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::User::LastLoggerOut\", \"persistentName\": \"LastLoggerOut\", \"inverseName\": \"inverseOf::LastLoggerOut\", \"inverseQualifiedName\": \"inverseOf::RootElement::org::multipoly::User::LastLoggerOut\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"LastLoggerOut\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": false, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/users/{userId}/LastLoggerOut\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/users/{userId}/LastLoggerOut\", \"tumlMetaDataUri\": \"/RootElement/integerMetaData\", \"fieldType\": \"" + FieldType.Integer + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/users/{userId}/LastLoggerOut",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/users/{userId}/LastLoggerOut",/* tumlMetaDataUri */ "/RootElement/integerMetaData",/* fieldType */ FieldType.Integer,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		LastLoggedIn(/* qualifiedName */ "RootElement::org::multipoly::User::LastLoggedIn",/* persistentName */ "LastLoggedIn",/* inverseName */ "inverseOf::LastLoggedIn",/* inverseQualifiedName */ "inverseOf::RootElement::org::multipoly::User::LastLoggedIn",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ true,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("LastLoggedIn"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ false,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ Integer.class,/* json */ "{\"name\": \"LastLoggedIn\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": true, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::User::LastLoggedIn\", \"persistentName\": \"LastLoggedIn\", \"inverseName\": \"inverseOf::LastLoggedIn\", \"inverseQualifiedName\": \"inverseOf::RootElement::org::multipoly::User::LastLoggedIn\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"LastLoggedIn\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": false, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/users/{userId}/LastLoggedIn\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/users/{userId}/LastLoggedIn\", \"tumlMetaDataUri\": \"/RootElement/integerMetaData\", \"fieldType\": \"" + FieldType.Integer + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/users/{userId}/LastLoggedIn",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/users/{userId}/LastLoggedIn",/* tumlMetaDataUri */ "/RootElement/integerMetaData",/* fieldType */ FieldType.Integer,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		Rogue(/* qualifiedName */ "RootElement::org::multipoly::User::Rogue",/* persistentName */ "Rogue",/* inverseName */ "inverseOf::Rogue",/* inverseQualifiedName */ "inverseOf::RootElement::org::multipoly::User::Rogue",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ true,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("Rogue"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ false,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ Boolean.class,/* json */ "{\"name\": \"Rogue\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": true, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::User::Rogue\", \"persistentName\": \"Rogue\", \"inverseName\": \"inverseOf::Rogue\", \"inverseQualifiedName\": \"inverseOf::RootElement::org::multipoly::User::Rogue\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"Rogue\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": false, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/users/{userId}/Rogue\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/users/{userId}/Rogue\", \"tumlMetaDataUri\": \"/RootElement/booleanMetaData\", \"fieldType\": \"" + FieldType.Boolean + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/users/{userId}/Rogue",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/users/{userId}/Rogue",/* tumlMetaDataUri */ "/RootElement/booleanMetaData",/* fieldType */ FieldType.Boolean,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		Name(/* qualifiedName */ "RootElement::org::multipoly::User::Name",/* persistentName */ "Name",/* inverseName */ "inverseOf::Name",/* inverseQualifiedName */ "inverseOf::RootElement::org::multipoly::User::Name",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ true,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("Name"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ false,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ String.class,/* json */ "{\"name\": \"Name\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": true, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::User::Name\", \"persistentName\": \"Name\", \"inverseName\": \"inverseOf::Name\", \"inverseQualifiedName\": \"inverseOf::RootElement::org::multipoly::User::Name\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"Name\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": false, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/users/{userId}/Name\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/users/{userId}/Name\", \"tumlMetaDataUri\": \"/RootElement/stringMetaData\", \"fieldType\": \"" + FieldType.String + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/users/{userId}/Name",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/users/{userId}/Name",/* tumlMetaDataUri */ "/RootElement/stringMetaData",/* fieldType */ FieldType.String,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		RootElement(/* qualifiedName */ "RootElement",/* persistentName */ "RootElement",/* inverseName */ "inverseOfRootElement",/* inverseQualifiedName */ "inverseOfRootElement",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ false,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ true,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("rootUser"),/* isOneToOne */ true,/* isOneToMany */ false,/* isManyToOne */ false,/* isManyToMany */ false,/* upper */ -1,/* lower */ 0,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ false,/* isInverseUnique */ false,/* isDerived */ false,/* isNavigable */ false,/* propertyType */ Object.class,/* json */ "{\"name\": \"RootElement\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": false, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement\", \"persistentName\": \"RootElement\", \"inverseName\": \"inverseOfRootElement\", \"inverseQualifiedName\": \"inverseOfRootElement\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": true, \"oneToOne\": true, \"oneToMany\": false, \"manyToOne\": false, \"manyToMany\": false, \"upper\": -1, \"lower\": 0, \"inverseUpper\": 1, \"label\": \"rootUser\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": false, \"inverseUnique\": false, \"derived\": false, \"navigable\": false, \"tumlUri\": \"/RootElement\", \"tumlOverloadedPostUri\": \"/RootElement\", \"tumlMetaDataUri\": \"\", \"fieldType\": \"" + FieldType.String + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement",/* tumlOverloadedPostUri */ "/RootElement",/* tumlMetaDataUri */ "",/* fieldType */ FieldType.String,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		id(/* qualifiedName */ "not_applicable",/* persistentName */ "not_applicable",/* inverseName */ "inverseOf::not_applicable",/* inverseQualifiedName */ "inverseOf::not_applicable",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ true,/* isReadOnly */ true,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ false,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert(""),/* isOneToOne */ true,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ false,/* isInverseUnique */ true,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ Object.class,/* json */ "{\"name\": \"id\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": true, \"readOnly\": true, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"not_applicable\", \"persistentName\": \"not_applicable\", \"inverseName\": \"inverseOf::not_applicable\", \"inverseQualifiedName\": \"inverseOf::not_applicable\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": false, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": true, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": false, \"inverseUnique\": true, \"derived\": false, \"navigable\": true, \"tumlUri\": \"\", \"tumlOverloadedPostUri\": \"\", \"tumlMetaDataUri\": \"\", \"fieldType\": \"" + FieldType.Integer + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "",/* tumlOverloadedPostUri */ "",/* tumlMetaDataUri */ "",/* fieldType */ FieldType.Integer,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ "");
		private String _qualifiedName;
		private String _persistentName;
		private String _inverseName;
		private String _inverseQualifiedName;
		private boolean _associationClassOne;
		private boolean _memberEndOfAssociationClass;
		private String _associationClassPropertyName;
		private String _inverseAssociationClassPropertyName;
		private boolean _associationClassProperty;
		private boolean _onePrimitivePropertyOfAssociationClass;
		private boolean _onePrimitive;
		private Boolean _readOnly;
		private DataTypeEnum dataTypeEnum;
		private List<UmlgValidation> validations;
		private boolean _manyPrimitive;
		private boolean _oneEnumeration;
		private boolean _manyEnumeration;
		private boolean _controllingSide;
		private boolean _composite;
		private boolean _inverseComposite;
		private String _label;
		private boolean _oneToOne;
		private boolean _oneToMany;
		private boolean _manyToOne;
		private boolean _manyToMany;
		private int _upper;
		private int _lower;
		private int _inverseUpper;
		private boolean _qualified;
		private boolean _inverseQualified;
		private boolean _ordered;
		private boolean _inverseOrdered;
		private boolean _unique;
		private boolean _inverseUnique;
		private boolean _derived;
		private boolean _navigability;
		private Class _propertyType;
		private String _json;
		private boolean _changeListener;
		private String tumlUri;
		private String tumlOverloadedPostUri;
		private String tumlMetaDataUri;
		private FieldType fieldType;
		private String tumlLookupUri;
		private String tumlCompositeParentLookupUri;
		/**
		 * constructor for UserRuntimePropertyEnum
		 * 
		 * @param _qualifiedName 
		 * @param _persistentName 
		 * @param _inverseName 
		 * @param _inverseQualifiedName 
		 * @param _associationClassOne 
		 * @param _memberEndOfAssociationClass 
		 * @param _associationClassPropertyName 
		 * @param _inverseAssociationClassPropertyName 
		 * @param _associationClassProperty 
		 * @param _onePrimitivePropertyOfAssociationClass 
		 * @param _onePrimitive 
		 * @param _readOnly 
		 * @param dataTypeEnum 
		 * @param validations 
		 * @param _manyPrimitive 
		 * @param _oneEnumeration 
		 * @param _manyEnumeration 
		 * @param _controllingSide 
		 * @param _composite 
		 * @param _inverseComposite 
		 * @param _label 
		 * @param _oneToOne 
		 * @param _oneToMany 
		 * @param _manyToOne 
		 * @param _manyToMany 
		 * @param _upper 
		 * @param _lower 
		 * @param _inverseUpper 
		 * @param _qualified 
		 * @param _inverseQualified 
		 * @param _ordered 
		 * @param _inverseOrdered 
		 * @param _unique 
		 * @param _inverseUnique 
		 * @param _derived 
		 * @param _navigability 
		 * @param _propertyType 
		 * @param _json 
		 * @param _changeListener 
		 * @param tumlUri 
		 * @param tumlOverloadedPostUri 
		 * @param tumlMetaDataUri 
		 * @param fieldType 
		 * @param tumlLookupUri 
		 * @param tumlCompositeParentLookupUri 
		 */
		private UserRuntimePropertyEnum(String _qualifiedName, String _persistentName, String _inverseName, String _inverseQualifiedName, boolean _associationClassOne, boolean _memberEndOfAssociationClass, String _associationClassPropertyName, String _inverseAssociationClassPropertyName, boolean _associationClassProperty, boolean _onePrimitivePropertyOfAssociationClass, boolean _onePrimitive, Boolean _readOnly, DataTypeEnum dataTypeEnum, List<UmlgValidation> validations, boolean _manyPrimitive, boolean _oneEnumeration, boolean _manyEnumeration, boolean _controllingSide, boolean _composite, boolean _inverseComposite, String _label, boolean _oneToOne, boolean _oneToMany, boolean _manyToOne, boolean _manyToMany, int _upper, int _lower, int _inverseUpper, boolean _qualified, boolean _inverseQualified, boolean _ordered, boolean _inverseOrdered, boolean _unique, boolean _inverseUnique, boolean _derived, boolean _navigability, Class _propertyType, String _json, boolean _changeListener, String tumlUri, String tumlOverloadedPostUri, String tumlMetaDataUri, FieldType fieldType, String tumlLookupUri, String tumlCompositeParentLookupUri)  {
			this._qualifiedName = _qualifiedName;
			this._persistentName = _persistentName;
			this._inverseName = _inverseName;
			this._inverseQualifiedName = _inverseQualifiedName;
			this._associationClassOne = _associationClassOne;
			this._memberEndOfAssociationClass = _memberEndOfAssociationClass;
			this._associationClassPropertyName = _associationClassPropertyName;
			this._inverseAssociationClassPropertyName = _inverseAssociationClassPropertyName;
			this._associationClassProperty = _associationClassProperty;
			this._onePrimitivePropertyOfAssociationClass = _onePrimitivePropertyOfAssociationClass;
			this._onePrimitive = _onePrimitive;
			this._readOnly = _readOnly;
			this.dataTypeEnum = dataTypeEnum;
			this.validations = validations;
			this._manyPrimitive = _manyPrimitive;
			this._oneEnumeration = _oneEnumeration;
			this._manyEnumeration = _manyEnumeration;
			this._controllingSide = _controllingSide;
			this._composite = _composite;
			this._inverseComposite = _inverseComposite;
			this._label = _label;
			this._oneToOne = _oneToOne;
			this._oneToMany = _oneToMany;
			this._manyToOne = _manyToOne;
			this._manyToMany = _manyToMany;
			this._upper = _upper;
			this._lower = _lower;
			this._inverseUpper = _inverseUpper;
			this._qualified = _qualified;
			this._inverseQualified = _inverseQualified;
			this._ordered = _ordered;
			this._inverseOrdered = _inverseOrdered;
			this._unique = _unique;
			this._inverseUnique = _inverseUnique;
			this._derived = _derived;
			this._navigability = _navigability;
			this._propertyType = _propertyType;
			this._json = _json;
			this._changeListener = _changeListener;
			this.tumlUri = tumlUri;
			this.tumlOverloadedPostUri = tumlOverloadedPostUri;
			this.tumlMetaDataUri = tumlMetaDataUri;
			this.fieldType = fieldType;
			this.tumlLookupUri = tumlLookupUri;
			this.tumlCompositeParentLookupUri = tumlCompositeParentLookupUri;
		}
	
		static public String asJson() {
			int count = 1;
			StringBuilder sb = new StringBuilder();;
			sb.append("{\"name\": \"User\", ");
			sb.append("\"qualifiedName\": \"RootElement::org::multipoly::User\", ");
			sb.append("\"uri\": \"" + getUriToObject() + "\", ");
			sb.append("\"properties\": [");
			for ( UserRuntimePropertyEnum l : UserRuntimePropertyEnum.values() ) {
				sb.append(l.toJson());
				if ( count < UserRuntimePropertyEnum.values().length ) {
					count++;
					sb.append(",");
				}
			}
			sb.append("]}");
			return sb.toString();
		}
		
		static public UserRuntimePropertyEnum fromInverseQualifiedName(String inverseQualifiedName) {
			if ( id.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return id;
			}
			if ( RootElement.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return RootElement;
			}
			if ( Name.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return Name;
			}
			if ( Rogue.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return Rogue;
			}
			if ( LastLoggedIn.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return LastLoggedIn;
			}
			if ( LastLoggerOut.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return LastLoggerOut;
			}
			if ( role.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return role;
			}
			if ( Password.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return Password;
			}
			if ( usergroup.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return usergroup;
			}
			if ( Username.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return Username;
			}
			return null;
		}
		
		static public UserRuntimePropertyEnum fromLabel(String _label) {
			if ( id.getLabel().equals(_label) ) {
				return id;
			}
			if ( RootElement.getLabel().equals(_label) ) {
				return RootElement;
			}
			if ( Name.getLabel().equals(_label) ) {
				return Name;
			}
			if ( Rogue.getLabel().equals(_label) ) {
				return Rogue;
			}
			if ( LastLoggedIn.getLabel().equals(_label) ) {
				return LastLoggedIn;
			}
			if ( LastLoggerOut.getLabel().equals(_label) ) {
				return LastLoggerOut;
			}
			if ( role.getLabel().equals(_label) ) {
				return role;
			}
			if ( Password.getLabel().equals(_label) ) {
				return Password;
			}
			if ( usergroup.getLabel().equals(_label) ) {
				return usergroup;
			}
			if ( Username.getLabel().equals(_label) ) {
				return Username;
			}
			return null;
		}
		
		static public UserRuntimePropertyEnum fromQualifiedName(String qualifiedName) {
			if ( id.getQualifiedName().equals(qualifiedName) ) {
				return id;
			}
			if ( RootElement.getQualifiedName().equals(qualifiedName) ) {
				return RootElement;
			}
			if ( Name.getQualifiedName().equals(qualifiedName) ) {
				return Name;
			}
			if ( Rogue.getQualifiedName().equals(qualifiedName) ) {
				return Rogue;
			}
			if ( LastLoggedIn.getQualifiedName().equals(qualifiedName) ) {
				return LastLoggedIn;
			}
			if ( LastLoggerOut.getQualifiedName().equals(qualifiedName) ) {
				return LastLoggerOut;
			}
			if ( role.getQualifiedName().equals(qualifiedName) ) {
				return role;
			}
			if ( Password.getQualifiedName().equals(qualifiedName) ) {
				return Password;
			}
			if ( usergroup.getQualifiedName().equals(qualifiedName) ) {
				return usergroup;
			}
			if ( Username.getQualifiedName().equals(qualifiedName) ) {
				return Username;
			}
			return null;
		}
		
		public String getAssociationClassPropertyName() {
			return this._associationClassPropertyName;
		}
		
		public DataTypeEnum getDataTypeEnum() {
			return this.dataTypeEnum;
		}
		
		public FieldType getFieldType() {
			return this.fieldType;
		}
		
		public String getInverseAssociationClassPropertyName() {
			return this._inverseAssociationClassPropertyName;
		}
		
		public String getInverseName() {
			return this._inverseName;
		}
		
		public String getInverseQualifiedName() {
			return this._inverseQualifiedName;
		}
		
		public int getInverseUpper() {
			return this._inverseUpper;
		}
		
		public String getJson() {
			return this._json;
		}
		
		public String getLabel() {
			return this._label;
		}
		
		public String getLookupFor_user_usergroup() {
			return this.tumlLookupUri;
		}
		
		public int getLower() {
			return this._lower;
		}
		
		public String getPersistentName() {
			return this._persistentName;
		}
		
		public Class getPropertyType() {
			return this._propertyType;
		}
		
		public String getQualifiedName() {
			return this._qualifiedName;
		}
		
		public Boolean getReadOnly() {
			return this._readOnly;
		}
		
		public String getTumlCompositeParentLookupUri() {
			return this.tumlCompositeParentLookupUri;
		}
		
		public String getTumlMetaDataUri() {
			return this.tumlMetaDataUri;
		}
		
		public String getTumlOverloadedPostUri() {
			return this.tumlOverloadedPostUri;
		}
		
		public String getTumlUri() {
			return this.tumlUri;
		}
		
		public int getUpper() {
			return this._upper;
		}
		
		static public String getUriToObject() {
			return "/RootElement/users/{userId}";
		}
		
		public List<UmlgValidation> getValidations() {
			return this.validations;
		}
		
		public boolean isAssociationClassOne() {
			return this._associationClassOne;
		}
		
		public boolean isAssociationClassProperty() {
			return this._associationClassProperty;
		}
		
		public boolean isChangeListener() {
			return this._changeListener;
		}
		
		public boolean isComposite() {
			return this._composite;
		}
		
		public boolean isControllingSide() {
			return this._controllingSide;
		}
		
		public boolean isDerived() {
			return this._derived;
		}
		
		public boolean isInverseComposite() {
			return this._inverseComposite;
		}
		
		public boolean isInverseOrdered() {
			return this._inverseOrdered;
		}
		
		public boolean isInverseQualified() {
			return this._inverseQualified;
		}
		
		public boolean isInverseUnique() {
			return this._inverseUnique;
		}
		
		public boolean isManyEnumeration() {
			return this._manyEnumeration;
		}
		
		public boolean isManyPrimitive() {
			return this._manyPrimitive;
		}
		
		public boolean isManyToMany() {
			return this._manyToMany;
		}
		
		public boolean isManyToOne() {
			return this._manyToOne;
		}
		
		public boolean isMemberEndOfAssociationClass() {
			return this._memberEndOfAssociationClass;
		}
		
		public boolean isNavigability() {
			return this._navigability;
		}
		
		public boolean isOneEnumeration() {
			return this._oneEnumeration;
		}
		
		public boolean isOnePrimitive() {
			return this._onePrimitive;
		}
		
		public boolean isOnePrimitivePropertyOfAssociationClass() {
			return this._onePrimitivePropertyOfAssociationClass;
		}
		
		public boolean isOneToMany() {
			return this._oneToMany;
		}
		
		public boolean isOneToOne() {
			return this._oneToOne;
		}
		
		public boolean isOrdered() {
			return this._ordered;
		}
		
		public boolean isQualified() {
			return this._qualified;
		}
		
		public boolean isUnique() {
			return this._unique;
		}
		
		@Override
		public boolean isValid(int elementCount) {
			if ( isQualified() ) {
				return elementCount >= getLower();
			} else {
				return (getUpper() == -1 || elementCount <= getUpper()) && elementCount >= getLower();
			}
		}
		
		@Override
		public String toJson() {
			return getJson();
		}
	
	
	}
}