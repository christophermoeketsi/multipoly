package org.multipoly.Board;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.tinkerpop.gremlin.structure.Edge;
import org.apache.tinkerpop.gremlin.structure.Vertex;
import org.multipoly.Board.Block.BlockRuntimePropertyEnum;
import org.multipoly.Board.meta.BoardMeta;
import org.umlg.runtime.adaptor.TransactionThreadEntityVar;
import org.umlg.runtime.adaptor.UMLG;
import org.umlg.runtime.adaptor.UmlgLabelConverterFactory;
import org.umlg.runtime.adaptor.UmlgTmpIdManager;
import org.umlg.runtime.collection.Filter;
import org.umlg.runtime.collection.Qualifier;
import org.umlg.runtime.collection.UmlgRuntimeProperty;
import org.umlg.runtime.collection.UmlgSet;
import org.umlg.runtime.collection.memory.UmlgMemorySet;
import org.umlg.runtime.collection.persistent.UmlgSetImpl;
import org.umlg.runtime.domain.BaseUmlgCompositionNode;
import org.umlg.runtime.domain.CompositionNode;
import org.umlg.runtime.domain.DataTypeEnum;
import org.umlg.runtime.domain.UmlgMetaNode;
import org.umlg.runtime.domain.UmlgNode;
import org.umlg.runtime.domain.UmlgRootNode;
import org.umlg.runtime.domain.restlet.FieldType;
import org.umlg.runtime.domain.restlet.UmlgRestletNode;
import org.umlg.runtime.util.ObjectMapperFactory;
import org.umlg.runtime.validation.UmlgConstraintViolation;
import org.umlg.runtime.validation.UmlgConstraintViolationException;
import org.umlg.runtime.validation.UmlgValidation;

public class Board extends BaseUmlgCompositionNode implements UmlgRestletNode, UmlgRootNode, CompositionNode {
	static final public long serialVersionUID = 1L;
	private UmlgSet<String> Name;
	private UmlgSet<Block> block;
	private UmlgSet<Asset> asset;
	private String tmpId;	// tmpId is only used the umlg restlet gui. It is never persisted. Its value is generated by the gui.

	/**
	 * constructor for Board
	 * 
	 * @param id 
	 */
	public Board(Object id)  {
		super(id);
	}
	
	/**
	 * constructor for Board
	 * 
	 * @param vertex 
	 */
	public Board(Vertex vertex)  {
		super(vertex);
	}
	
	/**
	 * default constructor for Board
	 */
	public Board()  {
		this(true);
	}
	
	/**
	 * constructor for Board
	 * 
	 * @param persistent 
	 */
	public Board(Boolean persistent)  {
		super(persistent);
		Edge edge = UMLG.get().getRoot().addEdge(getEdgeToRootLabel(), this.vertex);
		edge.property("inClass", this.getClass().getName());
	}

	public void addToAsset(Asset asset) {
		if ( asset != null ) {
			this.asset.add(asset);
		}
	}
	
	public void addToAsset(UmlgSet<Asset> asset) {
		if ( !asset.isEmpty() ) {
			this.asset.addAll(asset);
		}
	}
	
	public void addToAssetIgnoreInverse(Asset asset) {
		if ( asset != null ) {
			this.asset.addIgnoreInverse(asset);
		}
	}
	
	public void addToBlock(Block block) {
		if ( block != null ) {
			if ( !this.block.isEmpty() ) {
				throw new RuntimeException("Property RootElement::org::multipoly::Board::Board::blockis a one and already has a value!");
			}
			this.block.add(block);
		}
	}
	
	public void addToBlockIgnoreInverse(Block block) {
		if ( block != null ) {
			if ( !this.block.isEmpty() ) {
				throw new RuntimeException("Property RootElement::org::multipoly::Board::Board::blockis a one and already has a value!");
			}
			this.block.addIgnoreInverse(block);
		}
	}
	
	public void addToName(String Name) {
		if ( !this.Name.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Name != null ) {
			List<UmlgConstraintViolation> violations = validateName(Name);
			if ( violations.isEmpty() ) {
				this.Name.add(Name);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	public void addToNameIgnoreInverse(String Name) {
		if ( !this.Name.isEmpty() ) {
			throw new RuntimeException("Property is a one and already has value, first clear it before adding!");
		}
		if ( Name != null ) {
			List<UmlgConstraintViolation> violations = validateName(Name);
			if ( violations.isEmpty() ) {
				this.Name.add(Name);
			} else {
				throw new UmlgConstraintViolationException(violations);
			}
		}
	}
	
	static public UmlgSet<? extends Board> allInstances(Filter filter) {
		UmlgSet<Board> result = new UmlgMemorySet<Board>();
		result.addAll(UMLG.get().allInstances(Board.class.getName(), filter));
		return result;
	}
	
	static public UmlgSet<? extends Board> allInstances() {
		UmlgSet<Board> result = new UmlgMemorySet<Board>();
		result.addAll(UMLG.get().allInstances(Board.class.getName()));
		return result;
	}
	
	@Override
	public List<UmlgConstraintViolation> checkClassConstraints() {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}
	
	public void clearAsset() {
		this.asset.clear();
	}
	
	public void clearBlock() {
		this.block.clear();
	}
	
	public void clearName() {
		this.Name.clear();
	}
	
	@Override
	public void delete() {
		this.asset.clear();
		this.block.clear();
		TransactionThreadEntityVar.remove(this);
		this.vertex.remove();
	}
	
	@Override
	public void fromJson(Map<String,Object> propertyMap) {
		fromJsonDataTypeAndComposite(propertyMap);
		fromJsonNonCompositeOne(propertyMap);
		fromJsonNonCompositeRequiredMany(propertyMap);
	}
	
	@Override
	public void fromJson(String json) {
		ObjectMapper mapper = ObjectMapperFactory.INSTANCE.getObjectMapper();
		try {
			@SuppressWarnings(	"unchecked")
			 Map<String,Object> propertyMap = mapper.readValue(json, Map.class);
			fromJson(propertyMap);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	@Override
	public void fromJsonDataTypeAndComposite(Map<String,Object> propertyMap) {
		if ( propertyMap.containsKey("Name") ) {
			if ( propertyMap.get("Name") != null ) {
				String Name = (String)propertyMap.get("Name");
				setName(Name);
			} else {
				setName(null);
			}
		}
		if ( propertyMap.containsKey("tmpId") ) {
			if ( propertyMap.get("tmpId") != null ) {
				this.tmpId = (String)propertyMap.get("tmpId");
				UmlgTmpIdManager.INSTANCE.put(this.tmpId, getId());
			} else {
				this.tmpId = null;
			}
		}
	}
	
	@SuppressWarnings(	"unchecked")
	@Override
	public void fromJsonNonCompositeOne(Map<String,Object> propertyMap) {
		if ( propertyMap.containsKey("block") ) {
			if ( propertyMap.get("block") != null ) {
				Map<String, Object> blockMap = (Map<String, Object>)propertyMap.get("block");
				if ( blockMap.isEmpty() || blockMap.get("id") == null ) {
					setBlock(null);
				} else {
					Object id;
					Object idFromMap = blockMap.get("id");
					if ( (idFromMap instanceof String) && ((String)idFromMap).startsWith("fake") ) {
						id = UmlgTmpIdManager.INSTANCE.get((String)idFromMap);
					} else {
						id = idFromMap;
					}
					setBlock((Block)UMLG.get().getEntity(id));
				}
			} else {
				setBlock(null);
			}
		}
	}
	
	@Override
	public void fromJsonNonCompositeRequiredMany(Map<String,Object> propertyMap) {
	}
	
	public UmlgSet<Asset> getAsset() {
		return this.asset;
	}
	
	public Block getBlock() {
		UmlgSet<Block> tmp = this.block;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	public String getEdgeToRootLabel() {
		return UmlgLabelConverterFactory.getUmlgLabelConverter().convert("root_Board");
	}
	
	@Override
	public String getMetaDataAsJson() {
		return Board.BoardRuntimePropertyEnum.asJson();
	}
	
	public UmlgMetaNode getMetaNode() {
		return BoardMeta.getInstance();
	}
	
	public String getName() {
		UmlgSet<String> tmp = this.Name;
		if ( !tmp.isEmpty() ) {
			return tmp.iterator().next();
		} else {
			return null;
		}
	}
	
	@Override
	public UmlgNode getOwningObject() {
		return null;
	}
	
	@Override
	public String getQualifiedName() {
		return "RootElement::org::multipoly::Board::Board";
	}
	
	/**
	 * getQualifiers is called from the collection in order to update the index used to implement the qualifier
	 * 
	 * @param tumlRuntimeProperty 
	 * @param node 
	 * @param inverse 
	 */
	@Override
	public List<Qualifier> getQualifiers(UmlgRuntimeProperty tumlRuntimeProperty, UmlgNode node, boolean inverse) {
		List<Qualifier> result = Collections.emptyList();
		BoardRuntimePropertyEnum runtimeProperty;
		if ( !inverse ) {
			runtimeProperty = BoardRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getQualifiedName());
		} else {
			runtimeProperty = BoardRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getInverseQualifiedName());
		}
		if ( runtimeProperty != null && result.isEmpty() ) {
			switch ( runtimeProperty ) {
				default:
					result = Collections.emptyList();
			}
		
		}
		return result;
	}
	
	/**
	 * getSize is called from the BaseCollection.addInternal in order to save the sice of the inverse collection to update the edge's sequence order
	 * 
	 * @param inverse 
	 * @param tumlRuntimeProperty 
	 */
	@Override
	public int getSize(boolean inverse, UmlgRuntimeProperty tumlRuntimeProperty) {
		int result = 0;
		BoardRuntimePropertyEnum runtimeProperty;
		if ( !inverse ) {
			runtimeProperty = BoardRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getQualifiedName());
		} else {
			runtimeProperty = BoardRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getInverseQualifiedName());
		}
		if ( runtimeProperty != null && result == 0 ) {
			switch ( runtimeProperty ) {
				case asset:
					result = asset.size();
					break;
			
				case block:
					result = block.size();
					break;
			
				case Name:
					result = Name.size();
					break;
			
				default:
					result = 0;
			}
		
		}
		return result;
	}
	
	@Override
	public String getUid() {
		String uid;
		if ( !this.vertex.property("uid").isPresent() ) {
			uid=UUID.randomUUID().toString();
			this.vertex.property("uid", uid);
		} else {
			uid=this.vertex.value("uid");
		}
		return uid;
	}
	
	@Override
	public String getUmlName() {
		return "Board";
	}
	
	@Override
	public String getUri() {
		return ("\"" + BoardRuntimePropertyEnum.getUriToObject() + "\"");
	}
	
	@Override
	public boolean hasOnlyOneCompositeParent() {
		int result = 0;
		return result == 1;
	}
	
	public void initVariables() {
	}
	
	@Override
	public void initialiseProperties() {
		this.asset =  new UmlgSetImpl<Asset>(this, BoardRuntimePropertyEnum.asset);
		this.block =  new UmlgSetImpl<Block>(this, BoardRuntimePropertyEnum.block);
		this.Name =  new UmlgSetImpl<String>(this, BoardRuntimePropertyEnum.Name);
	}
	
	@Override
	public void initialiseProperty(UmlgRuntimeProperty tumlRuntimeProperty, boolean inverse) {
		BoardRuntimePropertyEnum runtimeProperty;
		if ( !inverse ) {
			runtimeProperty = (BoardRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getQualifiedName()));
		} else {
			runtimeProperty = (BoardRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getInverseQualifiedName()));
		}
		if ( runtimeProperty != null ) {
			switch ( runtimeProperty ) {
				case asset:
					this.asset =  new UmlgSetImpl<Asset>(this, BoardRuntimePropertyEnum.asset);
					break;
			
				case block:
					this.block =  new UmlgSetImpl<Block>(this, BoardRuntimePropertyEnum.block);
					break;
			
				case Name:
					this.Name =  new UmlgSetImpl<String>(this, BoardRuntimePropertyEnum.Name);
					break;
			
			}
		
		}
	}
	
	@Override
	public UmlgRuntimeProperty inverseAdder(UmlgRuntimeProperty tumlRuntimeProperty, boolean inverse, UmlgNode umlgNode) {
		BoardRuntimePropertyEnum runtimeProperty;
		if ( !inverse ) {
			runtimeProperty = (BoardRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getQualifiedName()));
		} else {
			runtimeProperty = (BoardRuntimePropertyEnum.fromQualifiedName(tumlRuntimeProperty.getInverseQualifiedName()));
		}
		if ( runtimeProperty != null ) {
			switch ( runtimeProperty ) {
				case asset:
					this.asset.inverseAdder((Asset)umlgNode);
					break;
			
				case block:
					this.block.inverseAdder((Block)umlgNode);
					break;
			
			}
			
			return runtimeProperty;
		} else {
			return null;
		}
	}
	
	@Override
	public boolean isTinkerRoot() {
		return true;
	}
	
	public UmlgSet<Asset> lookupFor_board_asset() {
		UmlgSet<Asset> result = new UmlgMemorySet<Asset>();
		Filter<Asset> filter = new Filter<Asset>() {
		    @Override
		    public boolean filter(Asset entity){
		        return !entity.getBoard().contains(Board.this);
		    }
		};
		result.addAll(org.multipoly.Board.Asset.allInstances(filter));
		return result;
	}
	
	public UmlgSet<Block> lookupFor_board_block() {
		UmlgSet<Block> result = new UmlgMemorySet<Block>();
		Filter<Block> filter = new Filter<Block>() {
		    @Override
		    public boolean filter(Block entity){
		        return entity.getBoard() == null;
		    }
		};
		result.addAll(org.multipoly.Board.Block.allInstances(filter));
		return result;
	}
	
	public void removeFromAsset(Asset asset) {
		if ( asset != null ) {
			this.asset.remove(asset);
		}
	}
	
	public void removeFromAsset(UmlgSet<Asset> asset) {
		if ( !asset.isEmpty() ) {
			this.asset.removeAll(asset);
		}
	}
	
	public void removeFromBlock(Block block) {
		if ( block != null ) {
			this.block.remove(block);
		}
	}
	
	public void removeFromBlock(UmlgSet<Block> block) {
		if ( !block.isEmpty() ) {
			this.block.removeAll(block);
		}
	}
	
	public void removeFromName(String Name) {
		if ( Name != null ) {
			this.Name.remove(Name);
		}
	}
	
	public void removeFromName(UmlgSet<String> Name) {
		if ( !Name.isEmpty() ) {
			this.Name.removeAll(Name);
		}
	}
	
	public void setAsset(UmlgSet<Asset> asset) {
		clearAsset();
		if ( asset != null ) {
			addToAsset(asset);
		}
	}
	
	public void setBlock(Block block) {
		if ( block != null ) {
			block.clearBoard();
			block.initialiseProperty(BlockRuntimePropertyEnum.board, false);
		}
		clearBlock();
		addToBlock(block);
	}
	
	public void setName(String Name) {
		clearName();
		addToName(Name);
	}
	
	/**
	 * deep indicates that components also be serialized.
	 * 
	 * @param deep 
	 */
	@Override
	public String toJson(Boolean deep) {
		StringBuilder sb = new StringBuilder();
		if ( this.tmpId != null ) {
			sb.append("\"tmpId\": \"" + this.tmpId + "\", ");
		}
		sb.append("\"id\": \"" + getId() + "\", ");
		sb.append("\"metaNodeId\": \"" + getMetaNode().getId() + "\", ");
		if ( getBlock() != null ) {
			if ( UmlgTmpIdManager.INSTANCE.get(getBlock().getId()) != null ) {
				sb.append("\"block\": " + "{\"id\": \"" + getBlock().getId() + "\", \"tmpId\": \"" + UmlgTmpIdManager.INSTANCE.get(getBlock().getId())  + "\",\"displayName\": \"" + getBlock().getName() + "\"}" + "");
			} else {
				sb.append("\"block\": " + "{\"id\": \"" + getBlock().getId() + "\", \"displayName\": \"" + getBlock().getName() + "\"}" + "");
			}
		} else {
			sb.append("\"block\": " + "{\"id\": " + null + ", \"displayName\": " + null + "}");
		}
		sb.append(", ");
		sb.append("\"Name\": " + (getName() != null ? "\"" + StringEscapeUtils.escapeJson(getName()) + "\"" : null ));
		sb.append(", ");
		sb.append("\"qualifiedName\": \"" + getQualifiedName() + "\"");
		sb.append(", ");
		sb.append("\"uri\": " + getUri());
		sb.insert(0, "{");
		sb.append("}");
		return sb.toString();
	}
	
	@Override
	public String toJson() {
		return toJson(false);
	}
	
	/**
	 * deep indicates that components also be serialized.
	 * 
	 * @param deep 
	 */
	@Override
	public String toJsonWithoutCompositeParent(Boolean deep) {
		StringBuilder sb = new StringBuilder();
		if ( this.tmpId != null ) {
			sb.append("\"tmpId\": \"" + this.tmpId + "\", ");
		}
		sb.append("\"id\": \"" + getId() + "\", ");
		sb.append("\"metaNodeId\": \"" + getMetaNode().getId() + "\", ");
		if ( getBlock() != null ) {
			if ( UmlgTmpIdManager.INSTANCE.get(getBlock().getId()) != null ) {
				sb.append("\"block\": " + "{\"id\": \"" + getBlock().getId() + "\", \"tmpId\": \"" + UmlgTmpIdManager.INSTANCE.get(getBlock().getId())  + "\",\"displayName\": \"" + getBlock().getName() + "\"}" + "");
			} else {
				sb.append("\"block\": " + "{\"id\": \"" + getBlock().getId() + "\", \"displayName\": \"" + getBlock().getName() + "\"}" + "");
			}
		} else {
			sb.append("\"block\": " + "{\"id\": " + null + ", \"displayName\": " + null + "}");
		}
		sb.append(", ");
		sb.append("\"Name\": " + (getName() != null ? "\"" + StringEscapeUtils.escapeJson(getName()) + "\"" : null ));
		sb.append(", ");
		sb.append("\"qualifiedName\": \"" + getQualifiedName() + "\"");
		sb.append(", ");
		sb.append("\"uri\": " + getUri());
		sb.insert(0, "{");
		sb.append("}");
		return sb.toString();
	}
	
	@Override
	public String toJsonWithoutCompositeParent() {
		return toJsonWithoutCompositeParent(false);
	}
	
	@Override
	public List<UmlgConstraintViolation> validateMultiplicities() {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		if ( getBlock() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::Board::Board::block", "lower multiplicity is 1"));
		}
		if ( getName() == null ) {
			result.add(new UmlgConstraintViolation("multiplicity", "RootElement::org::multipoly::Board::Board::Name", "lower multiplicity is 1"));
		}
		return result;
	}
	
	public List<UmlgConstraintViolation> validateName(String Name) {
		List<UmlgConstraintViolation> result = new ArrayList<UmlgConstraintViolation>();
		return result;
	}

	static public enum BoardRuntimePropertyEnum implements UmlgRuntimeProperty {
		asset(/* qualifiedName */ "RootElement::org::multipoly::Board::Board::asset",/* persistentName */ "asset",/* inverseName */ "board",/* inverseQualifiedName */ "RootElement::org::multipoly::Board::Asset::board",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ false,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("board_asset"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ false,/* isManyToMany */ true,/* upper */ -1,/* lower */ 0,/* inverseUpper */ -1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ true,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ Asset.class,/* json */ "{\"name\": \"asset\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": false, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::Board::Board::asset\", \"persistentName\": \"asset\", \"inverseName\": \"board\", \"inverseQualifiedName\": \"RootElement::org::multipoly::Board::Asset::board\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": false, \"manyToMany\": true, \"upper\": -1, \"lower\": 0, \"inverseUpper\": -1, \"label\": \"board_asset\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": true, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/boards/{boardId}/asset\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/boards/{boardId}/asset\", \"tumlMetaDataUri\": \"/RootElement/assetMetaData\", \"fieldType\": \"" + FieldType.Date + "\", \"tumlLookupUri\": \"/RootElement/boards/{boardId}/lookupFor_board_asset\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/boards/{boardId}/asset",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/boards/{boardId}/asset",/* tumlMetaDataUri */ "/RootElement/assetMetaData",/* fieldType */ FieldType.Date,/* tumlLookupUri */ "/RootElement/boards/{boardId}/lookupFor_board_asset",/* tumlCompositeParentLookupUri */ ""),
		block(/* qualifiedName */ "RootElement::org::multipoly::Board::Board::block",/* persistentName */ "block",/* inverseName */ "board",/* inverseQualifiedName */ "RootElement::org::multipoly::Board::Block::board",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ false,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ false,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("board_block"),/* isOneToOne */ true,/* isOneToMany */ false,/* isManyToOne */ false,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ true,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ Block.class,/* json */ "{\"name\": \"block\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": false, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::Board::Board::block\", \"persistentName\": \"block\", \"inverseName\": \"board\", \"inverseQualifiedName\": \"RootElement::org::multipoly::Board::Block::board\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": false, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": true, \"oneToMany\": false, \"manyToOne\": false, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"board_block\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": true, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/boards/{boardId}/block\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/boards/{boardId}/block\", \"tumlMetaDataUri\": \"/RootElement/blockMetaData\", \"fieldType\": \"" + FieldType.Integer + "\", \"tumlLookupUri\": \"/RootElement/boards/{boardId}/lookupFor_board_block\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/boards/{boardId}/block",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/boards/{boardId}/block",/* tumlMetaDataUri */ "/RootElement/blockMetaData",/* fieldType */ FieldType.Integer,/* tumlLookupUri */ "/RootElement/boards/{boardId}/lookupFor_board_block",/* tumlCompositeParentLookupUri */ ""),
		Name(/* qualifiedName */ "RootElement::org::multipoly::Board::Board::Name",/* persistentName */ "Name",/* inverseName */ "inverseOf::Name",/* inverseQualifiedName */ "inverseOf::RootElement::org::multipoly::Board::Board::Name",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ true,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("Name"),/* isOneToOne */ false,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ true,/* isInverseUnique */ false,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ String.class,/* json */ "{\"name\": \"Name\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": true, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement::org::multipoly::Board::Board::Name\", \"persistentName\": \"Name\", \"inverseName\": \"inverseOf::Name\", \"inverseQualifiedName\": \"inverseOf::RootElement::org::multipoly::Board::Board::Name\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": false, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"Name\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": true, \"inverseUnique\": false, \"derived\": false, \"navigable\": true, \"tumlUri\": \"/RootElement/boards/{boardId}/Name\", \"tumlOverloadedPostUri\": \"/RootElement/overloadedpost/boards/{boardId}/Name\", \"tumlMetaDataUri\": \"/RootElement/stringMetaData\", \"fieldType\": \"" + FieldType.String + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement/boards/{boardId}/Name",/* tumlOverloadedPostUri */ "/RootElement/overloadedpost/boards/{boardId}/Name",/* tumlMetaDataUri */ "/RootElement/stringMetaData",/* fieldType */ FieldType.String,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		RootElement(/* qualifiedName */ "RootElement",/* persistentName */ "RootElement",/* inverseName */ "inverseOfRootElement",/* inverseQualifiedName */ "inverseOfRootElement",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ false,/* isReadOnly */ false,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ true,/* isComposite */ false,/* isInverseComposite */ true,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert("rootBoard"),/* isOneToOne */ true,/* isOneToMany */ false,/* isManyToOne */ false,/* isManyToMany */ false,/* upper */ -1,/* lower */ 0,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ false,/* isInverseUnique */ false,/* isDerived */ false,/* isNavigable */ false,/* propertyType */ Object.class,/* json */ "{\"name\": \"RootElement\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": false, \"readOnly\": false, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"RootElement\", \"persistentName\": \"RootElement\", \"inverseName\": \"inverseOfRootElement\", \"inverseQualifiedName\": \"inverseOfRootElement\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": true, \"composite\": false, \"inverseComposite\": true, \"oneToOne\": true, \"oneToMany\": false, \"manyToOne\": false, \"manyToMany\": false, \"upper\": -1, \"lower\": 0, \"inverseUpper\": 1, \"label\": \"rootBoard\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": false, \"inverseUnique\": false, \"derived\": false, \"navigable\": false, \"tumlUri\": \"/RootElement\", \"tumlOverloadedPostUri\": \"/RootElement\", \"tumlMetaDataUri\": \"\", \"fieldType\": \"" + FieldType.String + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "/RootElement",/* tumlOverloadedPostUri */ "/RootElement",/* tumlMetaDataUri */ "",/* fieldType */ FieldType.String,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ ""),
		id(/* qualifiedName */ "not_applicable",/* persistentName */ "not_applicable",/* inverseName */ "inverseOf::not_applicable",/* inverseQualifiedName */ "inverseOf::not_applicable",/* isAssociationClassOne */ false,/* isMemberEndOfAssociationClass */ false,/* associationClassPropertyNameField */ "null",/* inverseAssociationClassPropertyNameField */ "null",/* isAssociationClassProperty */ false,/* isOnePrimitivePropertyOfAssociationClass */ false,/* isOnePrimitive */ true,/* isReadOnly */ true,/* dataTypeEnum */ null,/* validations */ Collections.<UmlgValidation>emptyList(),/* isManyPrimitive */ false,/* oneEnumeration */ false,/* manyEnumeration */ false,/* isControllingSide */ false,/* isComposite */ false,/* isInverseComposite */ false,/* label */ UmlgLabelConverterFactory.getUmlgLabelConverter().convert(""),/* isOneToOne */ true,/* isOneToMany */ false,/* isManyToOne */ true,/* isManyToMany */ false,/* upper */ 1,/* lower */ 1,/* inverseUpper */ 1,/* isQualified */ false,/* isInverseQualified */ false,/* isOrdered */ false,/* isInverseOrdered */ false,/* isUnique */ false,/* isInverseUnique */ true,/* isDerived */ false,/* isNavigable */ true,/* propertyType */ Object.class,/* json */ "{\"name\": \"id\", \"associationClassOne\": false, \"memberEndOfAssociationClass\": false, \"associationClassPropertyName\": null, \"inverseAssociationClassPropertyName\": null, \"associationClassProperty\": false, \"onePrimitivePropertyOfAssociationClass\": false, \"onePrimitive\": true, \"readOnly\": true, \"dataTypeEnum\": null, \"validations\": null, \"qualifiedName\": \"not_applicable\", \"persistentName\": \"not_applicable\", \"inverseName\": \"inverseOf::not_applicable\", \"inverseQualifiedName\": \"inverseOf::not_applicable\", \"manyPrimitive\": false, \"oneEnumeration\": false, \"manyEnumeration\": false, \"controllingSide\": false, \"composite\": false, \"inverseComposite\": false, \"oneToOne\": true, \"oneToMany\": false, \"manyToOne\": true, \"manyToMany\": false, \"upper\": 1, \"lower\": 1, \"inverseUpper\": 1, \"label\": \"\", \"qualified\": false, \"inverseQualified\": false, \"ordered\": false, \"inverseOrdered\": false, \"unique\": false, \"inverseUnique\": true, \"derived\": false, \"navigable\": true, \"tumlUri\": \"\", \"tumlOverloadedPostUri\": \"\", \"tumlMetaDataUri\": \"\", \"fieldType\": \"" + FieldType.Integer + "\", \"tumlLookupUri\": \"\", \"tumlCompositeParentLookupUri\": \"\"}",/* isChangeListenerAttribute */ false,/* tumlUri */ "",/* tumlOverloadedPostUri */ "",/* tumlMetaDataUri */ "",/* fieldType */ FieldType.Integer,/* tumlLookupUri */ "",/* tumlCompositeParentLookupUri */ "");
		private String _qualifiedName;
		private String _persistentName;
		private String _inverseName;
		private String _inverseQualifiedName;
		private boolean _associationClassOne;
		private boolean _memberEndOfAssociationClass;
		private String _associationClassPropertyName;
		private String _inverseAssociationClassPropertyName;
		private boolean _associationClassProperty;
		private boolean _onePrimitivePropertyOfAssociationClass;
		private boolean _onePrimitive;
		private Boolean _readOnly;
		private DataTypeEnum dataTypeEnum;
		private List<UmlgValidation> validations;
		private boolean _manyPrimitive;
		private boolean _oneEnumeration;
		private boolean _manyEnumeration;
		private boolean _controllingSide;
		private boolean _composite;
		private boolean _inverseComposite;
		private String _label;
		private boolean _oneToOne;
		private boolean _oneToMany;
		private boolean _manyToOne;
		private boolean _manyToMany;
		private int _upper;
		private int _lower;
		private int _inverseUpper;
		private boolean _qualified;
		private boolean _inverseQualified;
		private boolean _ordered;
		private boolean _inverseOrdered;
		private boolean _unique;
		private boolean _inverseUnique;
		private boolean _derived;
		private boolean _navigability;
		private Class _propertyType;
		private String _json;
		private boolean _changeListener;
		private String tumlUri;
		private String tumlOverloadedPostUri;
		private String tumlMetaDataUri;
		private FieldType fieldType;
		private String tumlLookupUri;
		private String tumlCompositeParentLookupUri;
		/**
		 * constructor for BoardRuntimePropertyEnum
		 * 
		 * @param _qualifiedName 
		 * @param _persistentName 
		 * @param _inverseName 
		 * @param _inverseQualifiedName 
		 * @param _associationClassOne 
		 * @param _memberEndOfAssociationClass 
		 * @param _associationClassPropertyName 
		 * @param _inverseAssociationClassPropertyName 
		 * @param _associationClassProperty 
		 * @param _onePrimitivePropertyOfAssociationClass 
		 * @param _onePrimitive 
		 * @param _readOnly 
		 * @param dataTypeEnum 
		 * @param validations 
		 * @param _manyPrimitive 
		 * @param _oneEnumeration 
		 * @param _manyEnumeration 
		 * @param _controllingSide 
		 * @param _composite 
		 * @param _inverseComposite 
		 * @param _label 
		 * @param _oneToOne 
		 * @param _oneToMany 
		 * @param _manyToOne 
		 * @param _manyToMany 
		 * @param _upper 
		 * @param _lower 
		 * @param _inverseUpper 
		 * @param _qualified 
		 * @param _inverseQualified 
		 * @param _ordered 
		 * @param _inverseOrdered 
		 * @param _unique 
		 * @param _inverseUnique 
		 * @param _derived 
		 * @param _navigability 
		 * @param _propertyType 
		 * @param _json 
		 * @param _changeListener 
		 * @param tumlUri 
		 * @param tumlOverloadedPostUri 
		 * @param tumlMetaDataUri 
		 * @param fieldType 
		 * @param tumlLookupUri 
		 * @param tumlCompositeParentLookupUri 
		 */
		private BoardRuntimePropertyEnum(String _qualifiedName, String _persistentName, String _inverseName, String _inverseQualifiedName, boolean _associationClassOne, boolean _memberEndOfAssociationClass, String _associationClassPropertyName, String _inverseAssociationClassPropertyName, boolean _associationClassProperty, boolean _onePrimitivePropertyOfAssociationClass, boolean _onePrimitive, Boolean _readOnly, DataTypeEnum dataTypeEnum, List<UmlgValidation> validations, boolean _manyPrimitive, boolean _oneEnumeration, boolean _manyEnumeration, boolean _controllingSide, boolean _composite, boolean _inverseComposite, String _label, boolean _oneToOne, boolean _oneToMany, boolean _manyToOne, boolean _manyToMany, int _upper, int _lower, int _inverseUpper, boolean _qualified, boolean _inverseQualified, boolean _ordered, boolean _inverseOrdered, boolean _unique, boolean _inverseUnique, boolean _derived, boolean _navigability, Class _propertyType, String _json, boolean _changeListener, String tumlUri, String tumlOverloadedPostUri, String tumlMetaDataUri, FieldType fieldType, String tumlLookupUri, String tumlCompositeParentLookupUri)  {
			this._qualifiedName = _qualifiedName;
			this._persistentName = _persistentName;
			this._inverseName = _inverseName;
			this._inverseQualifiedName = _inverseQualifiedName;
			this._associationClassOne = _associationClassOne;
			this._memberEndOfAssociationClass = _memberEndOfAssociationClass;
			this._associationClassPropertyName = _associationClassPropertyName;
			this._inverseAssociationClassPropertyName = _inverseAssociationClassPropertyName;
			this._associationClassProperty = _associationClassProperty;
			this._onePrimitivePropertyOfAssociationClass = _onePrimitivePropertyOfAssociationClass;
			this._onePrimitive = _onePrimitive;
			this._readOnly = _readOnly;
			this.dataTypeEnum = dataTypeEnum;
			this.validations = validations;
			this._manyPrimitive = _manyPrimitive;
			this._oneEnumeration = _oneEnumeration;
			this._manyEnumeration = _manyEnumeration;
			this._controllingSide = _controllingSide;
			this._composite = _composite;
			this._inverseComposite = _inverseComposite;
			this._label = _label;
			this._oneToOne = _oneToOne;
			this._oneToMany = _oneToMany;
			this._manyToOne = _manyToOne;
			this._manyToMany = _manyToMany;
			this._upper = _upper;
			this._lower = _lower;
			this._inverseUpper = _inverseUpper;
			this._qualified = _qualified;
			this._inverseQualified = _inverseQualified;
			this._ordered = _ordered;
			this._inverseOrdered = _inverseOrdered;
			this._unique = _unique;
			this._inverseUnique = _inverseUnique;
			this._derived = _derived;
			this._navigability = _navigability;
			this._propertyType = _propertyType;
			this._json = _json;
			this._changeListener = _changeListener;
			this.tumlUri = tumlUri;
			this.tumlOverloadedPostUri = tumlOverloadedPostUri;
			this.tumlMetaDataUri = tumlMetaDataUri;
			this.fieldType = fieldType;
			this.tumlLookupUri = tumlLookupUri;
			this.tumlCompositeParentLookupUri = tumlCompositeParentLookupUri;
		}
	
		static public String asJson() {
			int count = 1;
			StringBuilder sb = new StringBuilder();;
			sb.append("{\"name\": \"Board\", ");
			sb.append("\"qualifiedName\": \"RootElement::org::multipoly::Board::Board\", ");
			sb.append("\"uri\": \"" + getUriToObject() + "\", ");
			sb.append("\"properties\": [");
			for ( BoardRuntimePropertyEnum l : BoardRuntimePropertyEnum.values() ) {
				sb.append(l.toJson());
				if ( count < BoardRuntimePropertyEnum.values().length ) {
					count++;
					sb.append(",");
				}
			}
			sb.append("]}");
			return sb.toString();
		}
		
		static public BoardRuntimePropertyEnum fromInverseQualifiedName(String inverseQualifiedName) {
			if ( id.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return id;
			}
			if ( RootElement.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return RootElement;
			}
			if ( Name.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return Name;
			}
			if ( block.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return block;
			}
			if ( asset.getInverseQualifiedName().equals(inverseQualifiedName) ) {
				return asset;
			}
			return null;
		}
		
		static public BoardRuntimePropertyEnum fromLabel(String _label) {
			if ( id.getLabel().equals(_label) ) {
				return id;
			}
			if ( RootElement.getLabel().equals(_label) ) {
				return RootElement;
			}
			if ( Name.getLabel().equals(_label) ) {
				return Name;
			}
			if ( block.getLabel().equals(_label) ) {
				return block;
			}
			if ( asset.getLabel().equals(_label) ) {
				return asset;
			}
			return null;
		}
		
		static public BoardRuntimePropertyEnum fromQualifiedName(String qualifiedName) {
			if ( id.getQualifiedName().equals(qualifiedName) ) {
				return id;
			}
			if ( RootElement.getQualifiedName().equals(qualifiedName) ) {
				return RootElement;
			}
			if ( Name.getQualifiedName().equals(qualifiedName) ) {
				return Name;
			}
			if ( block.getQualifiedName().equals(qualifiedName) ) {
				return block;
			}
			if ( asset.getQualifiedName().equals(qualifiedName) ) {
				return asset;
			}
			return null;
		}
		
		public String getAssociationClassPropertyName() {
			return this._associationClassPropertyName;
		}
		
		public DataTypeEnum getDataTypeEnum() {
			return this.dataTypeEnum;
		}
		
		public FieldType getFieldType() {
			return this.fieldType;
		}
		
		public String getInverseAssociationClassPropertyName() {
			return this._inverseAssociationClassPropertyName;
		}
		
		public String getInverseName() {
			return this._inverseName;
		}
		
		public String getInverseQualifiedName() {
			return this._inverseQualifiedName;
		}
		
		public int getInverseUpper() {
			return this._inverseUpper;
		}
		
		public String getJson() {
			return this._json;
		}
		
		public String getLabel() {
			return this._label;
		}
		
		public String getLookupFor_board_asset() {
			return this.tumlLookupUri;
		}
		
		public String getLookupFor_board_block() {
			return this.tumlLookupUri;
		}
		
		public int getLower() {
			return this._lower;
		}
		
		public String getPersistentName() {
			return this._persistentName;
		}
		
		public Class getPropertyType() {
			return this._propertyType;
		}
		
		public String getQualifiedName() {
			return this._qualifiedName;
		}
		
		public Boolean getReadOnly() {
			return this._readOnly;
		}
		
		public String getTumlCompositeParentLookupUri() {
			return this.tumlCompositeParentLookupUri;
		}
		
		public String getTumlMetaDataUri() {
			return this.tumlMetaDataUri;
		}
		
		public String getTumlOverloadedPostUri() {
			return this.tumlOverloadedPostUri;
		}
		
		public String getTumlUri() {
			return this.tumlUri;
		}
		
		public int getUpper() {
			return this._upper;
		}
		
		static public String getUriToObject() {
			return "/RootElement/boards/{boardId}";
		}
		
		public List<UmlgValidation> getValidations() {
			return this.validations;
		}
		
		public boolean isAssociationClassOne() {
			return this._associationClassOne;
		}
		
		public boolean isAssociationClassProperty() {
			return this._associationClassProperty;
		}
		
		public boolean isChangeListener() {
			return this._changeListener;
		}
		
		public boolean isComposite() {
			return this._composite;
		}
		
		public boolean isControllingSide() {
			return this._controllingSide;
		}
		
		public boolean isDerived() {
			return this._derived;
		}
		
		public boolean isInverseComposite() {
			return this._inverseComposite;
		}
		
		public boolean isInverseOrdered() {
			return this._inverseOrdered;
		}
		
		public boolean isInverseQualified() {
			return this._inverseQualified;
		}
		
		public boolean isInverseUnique() {
			return this._inverseUnique;
		}
		
		public boolean isManyEnumeration() {
			return this._manyEnumeration;
		}
		
		public boolean isManyPrimitive() {
			return this._manyPrimitive;
		}
		
		public boolean isManyToMany() {
			return this._manyToMany;
		}
		
		public boolean isManyToOne() {
			return this._manyToOne;
		}
		
		public boolean isMemberEndOfAssociationClass() {
			return this._memberEndOfAssociationClass;
		}
		
		public boolean isNavigability() {
			return this._navigability;
		}
		
		public boolean isOneEnumeration() {
			return this._oneEnumeration;
		}
		
		public boolean isOnePrimitive() {
			return this._onePrimitive;
		}
		
		public boolean isOnePrimitivePropertyOfAssociationClass() {
			return this._onePrimitivePropertyOfAssociationClass;
		}
		
		public boolean isOneToMany() {
			return this._oneToMany;
		}
		
		public boolean isOneToOne() {
			return this._oneToOne;
		}
		
		public boolean isOrdered() {
			return this._ordered;
		}
		
		public boolean isQualified() {
			return this._qualified;
		}
		
		public boolean isUnique() {
			return this._unique;
		}
		
		@Override
		public boolean isValid(int elementCount) {
			if ( isQualified() ) {
				return elementCount >= getLower();
			} else {
				return (getUpper() == -1 || elementCount <= getUpper()) && elementCount >= getLower();
			}
		}
		
		@Override
		public String toJson() {
			return getJson();
		}
	
	
	}
}